#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import readline from 'readline';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function setupEnvironment() {
  console.log('üîß Setting up Google Calendar Integration Environment Variables\n');
  
  console.log('To get your Google Client ID:');
  console.log('1. Go to https://console.cloud.google.com/');
  console.log('2. Create a new project or select an existing one');
  console.log('3. Enable the Google Calendar API');
  console.log('4. Create OAuth 2.0 credentials');
  console.log('5. Add authorized JavaScript origins (e.g., http://localhost:5173)');
  console.log('6. Copy the Client ID\n');
  
  const clientId = await askQuestion('Enter your Google Client ID: ');
  
  if (!clientId || clientId.trim() === '' || clientId === 'your_google_client_id_here') {
    console.log('‚ùå Invalid Client ID. Please provide a valid Google Client ID.');
    process.exit(1);
  }
  
  // Optional client secret
  const clientSecret = await askQuestion('Enter your Google Client Secret (optional, press Enter to skip): ');
  
  // Create .env file content
  const envContent = `# Google OAuth Configuration
# Generated by setup script on ${new Date().toISOString()}
REACT_APP_GOOGLE_CLIENT_ID=${clientId}
${clientSecret ? `REACT_APP_GOOGLE_CLIENT_SECRET=${clientSecret}` : '# REACT_APP_GOOGLE_CLIENT_SECRET=your_google_client_secret_here'}

# Optional: For debugging
REACT_APP_DEBUG=false
`;
  
  const envPath = path.join(process.cwd(), '.env');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n‚úÖ Environment variables configured successfully!');
    console.log('üìÅ Created .env file with your Google OAuth configuration.');
    console.log('\nüöÄ You can now run:');
    console.log('   npm run dev');
    console.log('   npx cap sync android');
    console.log('   npx cap open android');
  } catch (error) {
    console.error('‚ùå Error creating .env file:', error.message);
    process.exit(1);
  }
  
  rl.close();
}

// Run main function if this file is executed directly
if (process.argv[1] === __filename || process.argv[1] === fileURLToPath(import.meta.url)) {
  setupEnvironment().catch(console.error);
}

export { setupEnvironment }; 